# README

## Docker containers

Once Docker and Kubernetes are both running, building the docker container can be done using (with `~/Desktop/ANUCourses/Honours/honours` as the pwd):

```sh
docker build -t radware .
```

Running the container can be done with (again with `~/Desktop/ANUCourses/Honours/honours` as the pwd):

```sh
docker run -it --rm -v ~/Desktop/ANUCourses/Honours/honours/rw05:/rw05 radware /bin/bash
```

In the above command:

`-it` makes the container run interactively.
`--rm` means that the container shuts down after it has been exited.
`-v local:cont` mounts the `local` directory into the path `cont` within the container.
`/bin/bash` is the command that the container executes in the shell - in this case it is just giving us a bash shell.

## With display forwarding 

To run the container including display forwarding, after building the container, first run this command to store your IP address:
```sh
 export IP=$(ifconfig en0 | grep inet | awk '$1=="inet" {print $2}') 
```

Make sure that X11 is running, by opening XQuartz or by running
```sh
open -a XQuartz
``` 

The following command also needs to be run:

```sh
xhost + $IP
```
Then, run this command to run the container:

```sh
docker run -it --rm -e DISPLAY=$IP:0 -e XAUTHORITY=/.Xauthority --net host -v /tmp/.X11-unix:/tmp/.X11-unix -v ~/.Xauthority:/.Xauthority -v ~/Desktop/ANUCourses/Honours/rw05:/rw05 radware /bin/bash
```

A graphics window will appear when `gf3` is run (or `gf3 file.ext` to open a specific file)


`touch f` will create an empty file (that is not of any type) called `f`.

Files that are created using touch within the container directory will persist into the local directory.

To exit the container, use `exit`.


## Updating git repository
1. Check `git status`
2. Use `git add .` to add all files or `git add <file>` for specific files
	1. Note that any files in the .gitignore file will be ignored during git commits 	and pushes
3. `git commit -m "message"`
4. `git push` then enter passphrase when prompted



### Stuff that has been done to get radware working

Starting the container then doing `cd /rw05/src;make all;make install` will work if you first use the `Makefile` in this repository rather than the one shipped with radware by default. I think we are using `rw05.3.tgz` at the moment (which you could download with `wget ftp://radware.phy.ornl.gov/pub/radware/unix/rw05.3.tgz`.

Tasks:

1. Setup the Dockerfile so that it:
    1. Installs all required libraries (done)
    1. Download radware from the ftp server using wget (done)
    1. Copy our Makefile (`Makefile_radware`, which uses the root user rather than graddford) into `rw05/src` (done)
    1. `cd /rw05/src;make all;make install` (done)
    1. Make our own radware.bashrc (which has `export PATH=~/rw_current/bin/:${PATH}` as last line) and copy that into the Docker image, then source it (e.g. `source ~/.bashrc_radware`) (done)
    1. Setup display forwarding (done)
